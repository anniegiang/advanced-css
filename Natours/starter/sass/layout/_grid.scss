.row {
  // standard width is 1140px/10px = 114rem (1rem = 10px), we should not used fixed units
  // max-width: if we have enough available space,the browser will use the specified width,
  // else, it will fill 100% of the available space
  max-width: $grid-width;
  // center nested block elements
  margin: 0 auto;

  // select all rows except for the last row
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }

  @include respond(tab-port) {
    max-width: $grid-width-small;
    padding: 0 3rem;
  }

  // without this, the row parent element collapses its height to 0 bc all its child elements are floated
  @include clearfix;

  // [class=^="col-"] select all elements with classes that start with "col-"
  // [class=""] : contains
  // [class$=""] : ends with

  [class^="col-"] {
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;

      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }

    @include respond(tab-port) {
      width: 100% !important; // turns into one column, rows stacked on one another
    }
  }

  .col-1-of-2 {
    // calc lets you mix units (can't do this in scss)
    // #{} to use sass variables
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - (2 * #{$gutter-horizontal})) / 3);
  }

  .col-2-of-3 {
    width: calc(
      (2 * (100% - (2 * #{$gutter-horizontal})) / 3) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - (3 * #{$gutter-horizontal})) / 4);
  }

  .col-2-of-4 {
    width: calc(
      (2 * (100% - (3 * #{$gutter-horizontal})) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      3 * ((100% - (3 * #{$gutter-horizontal})) / 4) + 2 * #{$gutter-horizontal}
    );
  }
}
